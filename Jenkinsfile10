#!groovy

/* This is the evolution of J3 (blake + post-clean) towards MP-4+ */
/* groovylint-disable NestedBlockDepth */
/* groovylint-disable GStringExpressionWithinString */
/* groovylint-disable LineLength */

/* groovylint-disable-next-line NoWildcardImports */
import java.util.regex.*

/* groovylint-disable-next-line CompileStatic */
DEVBRANCH = 'dev'

properties (
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '60',
                daysToKeepStr: '',
                numToKeepStr: '30')
        ),
        disableConcurrentBuilds(),
        parameters (
            [
                // ? change host from string to choices once consistent environments?
                string(name: 'REPO', defaultValue: 'ibm_zos_core'),
                string(name: 'BRANCH', defaultValue: DEVBRANCH),
                string(name: 'TARGET_HOST', defaultValue: 'ec33004a.vmec.svl.ibm.com'),
                credentials(name: 'TARGET_HOST_PRIVATE_KEY', defaultValue: 'omvsadm-2',
                    credentialType: 'SSH Username with private key' ),
                string(name: 'USERNAME', defaultValue: 'omvsadm'),
                //string(name: 'PYTHON_PATH', defaultValue: '/python3/usr/lpp/IBM/cyp/v3r8/pyz/bin/python3.8',
                //
                string(name: 'PYTHON_PATH', defaultValue: '/python2/usr/lpp/IBM/cyp/v3r9/pyz/bin/python3.9', required: true),
                text(
                    name: 'ENVIRONMENT',
                    defaultValue: """\
                        _BPXK_AUTOCVT: "ON"
                        _CEE_RUNOPTS: "'FILETAG(AUTOCVT,AUTOTAG) POSIX(ON)'"
                        _TAG_REDIR_ERR: txt
                        _TAG_REDIR_IN: txt
                        _TAG_REDIR_OUT: txt
                        LANG: C
                        ZOAU_ROOT: "/zoau/v1.2.0"
                        ZOAU_HOME: "/zoau/v1.2.0"
                        LIBPATH: "/zoau/v1.2.0/lib:/python2/usr/lpp/IBM/cyp/v3r9/pyz/lib:/lib:/usr/lib:."
                        ZOAUTIL_DIR: "/zoau/v1.2.0"
                        PYTHONPATH: "/zoau/v1.2.0/lib"
                        /* groovylint-disable-next-line LineLength */
                        PATH: "/zoau/v1.2.0/bin:/python2/usr/lpp/IBM/cyp/v3r9/pyz/bin:/bin:/usr/sbin:/var/bin:/usr/lpp/java/java180/J8.0/bin" """.stripIndent(),
                    required: true
                ),

                string(name: 'WHAT_TO_TEST', defaultValue: 'test-only-changed-files',
                        description: "Replace the default value for any of the options below:\n'test-none': Do not run any tests.\n'test-specific-file:<filepath>': Test a specific file in ibm_zos_core that is specified in place of <filepath>. For ex. 'test-specific-file:plugins/action/zos_copy.py'.\n'test-only-changed-files': Run the dependencyfinder.py script to find and run only tests that are affected by changes.\n'test-all': Perform all tests (full regression).",
                        required: true
                )
                choice(name: 'SEND_GIT_LOGS_TO_ARTIFACTORY', choices: ['No', 'Yes'], description: 'Send Git logs to artifactory (Enabling this is only recommended for releases).'),
                string(name: 'BRANCH_TAG_TO_COMPARE', defaultValue: 'origin/', description: "If above option is 'Yes', specify which branch or tag to compare git commits from the branch (chosen above) that the job is running against. When specifying a branch instead of a tag, precede the branch name by 'origin/'."),
                choice(name: 'SEND_JENKINS_LOGS_TO_ARTIFACTORY', choices: ['No', 'Yes'], description: 'Send Jenkins logs to artifactory (Enabling this is only recommended for releases).'),
                choice(name: 'RELEASE_ARTIFACT_TO_ARTIFACTORY', choices: ['No', 'Yes'], description: 'Generate and release artifact to artifactory (Enabling this is only recommended for releases).'),
                credentials(name: 'ARTIFACTORY_API_KEY', defaultValue: 'hcfres_artifactory_api_key', credentialType: "Username with password", required: true)
            ]
        )
    ]
)

YAMLLINT_CONFIG_CONTENTS = '''extends: default
rules:
  braces: {max-spaces-inside: 1, level: error}
  brackets: {max-spaces-inside: 1, level: error}
  colons: {max-spaces-after: -1, level: error}
  commas: {max-spaces-after: -1, level: error}
  comments: disable
  comments-indentation: disable
  document-start: disable
  empty-lines: {max: 3, level: error}
  hyphens: {level: error}
  indentation: disable
  key-duplicates: enable
  line-length: disable
  new-line-at-end-of-file: disable
  new-lines: {type: unix}
  trailing-spaces: disable
  truthy: disable
'''

ANSIBLE_CONFIG_CONTENTS = '''#######
[defaults]
forks = 25
timeout = 30
[ssh_connection]
pipelining = True
'''

NL = '\n'

/* -------------------------------------------------------------------------- */
/*                                File builders                               */
/* -------------------------------------------------------------------------- */

// Buld and returns a string to be used as the contents of
// a YAML-formatted configuration file. The configuration file
// is consumed by functional testing pytest fixtures
generateYmlConfig = { hostName, username, pythonPath, environment ->
    indent = '    '
    indentedEnv = indent + environment.split("${NL}").join("${NL}" + indent)
    return """host: ${hostName}
user: ${username}
python_path: ${pythonPath}
environment:
${indentedEnv}
"""
}

/* -------------------------------------------------------------------------- */
/*                        Log parsers / error checkers                        */
/* -------------------------------------------------------------------------- */

// Determine if any of the testcases failed
// expects pytest output formatting

checkForPytestFails = { otput ->
    /* groovylint-disable-next-line LineLength */
    if (Pattern.compile(/(?:\=+\s(?:[1-9]+[0-9]*\sfailed|[1-9]\sfailed))|(?:[1-9]+[0-9]*\serror.?\sin)|(?:pytest_ansible.errors.AnsibleConnectionFailure:\s+Host\s+unreachable)/).matcher(otput).find()) {
        /* groovylint-disable-next-line LineLength */
        slim_output = Pattern.compile(/^----------------------------- Captured stdout call -----------------------------.*?(?=^(?:(?:_+ test)|(?:=======+ )))/, Pattern.DOTALL | Pattern.MULTILINE).matcher(otput).replaceAll('')
        error("One or more pytest testcases failed! \n ${slim_output}")
    }
}

// Determines if functional tests failed due to connection errors
checkForConnectionErrors = { ouput ->
    /* groovylint-disable-next-line LineLength */
    return Pattern.compile(/(?:pytest\_ansible.errors.AnsibleConnectionFailure\:\sHost\sunreachable)/).matcher(ouput).find()
}

// Determine if ansible-test raised any errors
// expects output of ansible-test sanity
checkForAnsibleTestErrors = { outut ->
    if (Pattern.compile(/.*Traceback\s.most\srecent\scall\slast./).matcher(outut).find()) {
        error("ansible-test encountered an internal error!\n!! Full output: ${outut}!!\n")
    }
    errorString = ''
    errors = Pattern.compile(/.*(ERROR:\s.+)/).matcher(outut)
    while (errors.find()) {
        errorString = errorString + errors.group(1) + NL
    }
    if (errorString != '') {
        error("ansible-test detected errors! \n-- Trapped: ${errorString}--\n!! Full output: ${outut}!!\n")
    }
}

checkForBanditErrors = { outpt ->
    if (Pattern.compile(/>>\s+Issue:\s\[/).matcher(outpt).find()) {
        error("Bandit returned errors! \n ${outpt}")
    }
}

/* -------------------------------------------------------------------------- */
/*                           helper functions                                 */
/* -------------------------------------------------------------------------- */

checkout = {
    dir(env.WORKSPACE) {
        sh "rm -rf ${REPO}"
        sh "git clone https://github.com/ansible-collections/${REPO}.git ; cd ${REPO} ; git checkout ${BRANCH}"
        sh "sed -i 's/ansible==2.9.27/ansible-core==2.11.12/g' ${REPO}/tests/requirements.txt"
    }
}

buildInstall = {
    // Attempt to build the collection
    out = sh script: 'ansible-galaxy collection build . --force'
    // Install the built collection
    out = sh script: "ansible-galaxy collection install ibm-${REPO}* --force -p .", returnStdout: true
    return out
}

makeflag = { title ->
    tstr = '======================================\n'
    echo tstr + "${title}\n" + tstr
}

def setHost() {
    // Read hosts inventory file for ASA or AC depending on the REPO the job is running against
    if ("${REPO}" == "ibm_zos_ims") {
        def hosts_file = "/var/lib/jenkins/workspace/asa_hosts_inventory.txt"
    }
    else {
        def hosts_file = "/var/lib/jenkins/workspace/ac_hosts_inventory.txt"
    }
    def hosts = new File("${hosts_file}").text.readLines()

    // Create file to temporarily store rotated hosts before copying them to hosts file
    def currdir = sh script: "pwd", returnStdout: true
    currdir = "${currdir}".replaceAll("\n", "")
    sh "touch ${currdir}/temp_rotated_hosts.txt"
    def hosts_size = "${hosts.size()}".toInteger() // determine number of lines/hosts

    if ("${TARGET_HOST}" == "") {
        // Determine the next available host
        TARGET_HOST = "${hosts[0]}".replaceAll("\n", "")
        echo "--> The target host parameter was left empty."
        echo "--> The next available target host in the inventory file is: '${TARGET_HOST}'"

        // Rotate hosts
        for(int i = 1; i < hosts_size; i++) {
            sh "echo ${hosts[i]} >> ${currdir}/temp_rotated_hosts.txt"
        }
        sh "echo ${hosts[0]} >> ${currdir}/temp_rotated_hosts.txt"
        sh "cp ${currdir}/temp_rotated_hosts.txt ${hosts_file}"

        echo "--> Rotated hosts in the inventory file: '${hosts_file}'"
    }

    else {
        // If the target host exists in the inventory, shift it to the bottom of the stack
        if (hosts.contains(TARGET_HOST)) {
            echo "--> The specified target host is in the inventory file and it will be shifted to the bottom."

            for(int i = 0; i < hosts_size; i++) {
                if ("${hosts[i]}" != "${TARGET_HOST}") {
                    sh "echo ${hosts[i]} >> ${currdir}/temp_rotated_hosts.txt"
                }
            }
            sh "echo ${TARGET_HOST} >> ${currdir}/temp_rotated_hosts.txt"
            sh "cp ${currdir}/temp_rotated_hosts.txt ${hosts_file}"

            echo "--> Rotated hosts in the inventory file: '${hosts_file}'"
        }

        else {
            echo "--> The specified target host is not in the inventory file. The file will remain unchanged."
        }
    }

    // Remove any remaining temp files
    sh "rm ${currdir}/temp_rotated_hosts.txt"
}

docker_object_name = "ansible4-test-image:${env.BUILD_ID}"

node('master') {
    currentBuild.result = 'SUCCESS'

    stage('Checkout') {
        checkout()
    }

    stage('Set Host') {
        echo """\
            /* -------------------------------------------------------------------------- */
            /*                                  Set Host                                  */
            /* -------------------------------------------------------------------------- */""".stripIndent()
        echo "--> The target host specified is: '${TARGET_HOST}'"
        setHost()
        echo "--> Target host is set to: ${TARGET_HOST}"
    }

    cleanWs()
}
